class Player_Remote:
    """
    A remote player that interacts with a Connect4 server via REST API.
    """

    def __init__(self, server_url):
        """
        Initialize a remote player.
        Parameters:
            server_url (str): The base URL of the Connect4 server.
        """
        self.server_url = server_url
        self.id = str(uuid.uuid4())  # Generate a unique ID for the player
        self.icon = None  # Will be assigned after registration

    def register_in_game(self):
        """
        Register the player on the server and get the assigned icon.
        """
        print("Attempting to register player...")
        response = requests.post(
            f"{self.server_url}/connect4/register",
            json={"player_id": self.id},
        )
        print(f"Server response: {response.status_code} - {response.text}")
        response.raise_for_status()
        self.icon = response.json()["player_icon"]
        print(f"Player registered successfully with icon: {self.icon}")

    def get_game_status(self):
        """
        Query the server for the current game status.
        Returns:
            dict: The current game status.
        """
        print("Querying server for game status...")
        response = requests.get(f"{self.server_url}/connect4/status")
        print(f"Server response: {response.status_code} - {response.text}")
        response.raise_for_status()
        return response.json()

    def make_move(self):
        """
        Prompt the player to enter a column and send the move to the server.
        """
        column = int(input("Enter the column number (1-8): "))
        column -= 1
        response = requests.post(
            f"{self.server_url}/connect4/check_move",
            json={"column": column, "player_id": self.id},
        )
        print(f"Server response: {response.status_code} - {response.text}")
        response.raise_for_status()

    def visualize(self):
        """
        Fetch and print the current game board.
        """
        print("Fetching current board...")
        response = requests.get(f"{self.server_url}/connect4/board")
        response.raise_for_status()
        board = response.json()["board"]
        for i in range(0, len(board), 8):
            print(" | ".join(board[i:i+8]))
        print()

    def celebrate_win(self):
        """
        Display a win celebration message for the player.
        """
        print("Congratulations, you win!")
